name: Build viewer

on:
  workflow_dispatch:
    inputs:
      operating_system:
        required: true
        type: choice
        description: Operating system
        options:
        - windows-2022
        - windows
        - macos-11
      release_type:
        required: true
        type: choice
        description: Release type
        options:
        - release
        - rtm/final
        - rtm/final-avx2
      bundle_avx2:
        required: true
        type: boolean
        description: Bundle AVX2 build with the installer
      viewer_channel:
        required: true
        description: Viewer channel
        default: 'Catznip Internal'

env:
  AUTOBUILD_INSTALLABLE_CACHE: ${{github.workspace}}/dep/packages
  AUTOBUILD_VARIABLES_FILE: ${{github.workspace}}/dep/build-variables/variables
  NSIS_DEP: ${{github.workspace}}/dep/nsis
  AUTOBUILD_VSVER: 170
  PYTHON_VERSION: '3.11'
  TOOLSET_VERSION: 'v143'
  ADDRESS_SIZE: 64
  BUILD_CONFIG: 'Release'
  VIEWER_CHANNEL: ${{ github.event.inputs.viewer_channel }}

jobs:
  build:
    runs-on: ${{ contains(github.event.inputs.operating_system, '-') && github.event.inputs.operating_system || 'self-hosted' }}

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Check out autobuild
      uses: actions/checkout@v2
      with:
        repository: CatznipViewer/autobuild
        ref: main
        path: 'dep/autobuild'
        token: ${{ secrets.AUTH_PAT }}

    - name: Check out build-variables
      uses: actions/checkout@v2
      with:
        repository: CatznipViewer/build-variables
        ref: ${{ format('catznip/{0}', github.event.inputs.release_type)  }}
        path: 'dep/build-variables'
        token: ${{ secrets.AUTH_PAT }}

    - name: Check out build-tools
      uses: actions/checkout@v2
      with:
        repository: CatznipViewer/build-tools
        ref: main
        path: 'dep/build-tools'
        token: ${{ secrets.AUTH_PAT }}

    - name: Check out action-scp
      uses: actions/checkout@v2
      with:
        repository: CatznipViewer/action-scp
        ref: main
        path: 'dep/action-scp'

    - name: Set environment variables
      run: |
        echo "AUTOBUILD_BUILD_ID=$(git rev-list --count HEAD)" >> $GITHUB_ENV
        echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
        echo "DEPENDENCIES_SRC_PATH=/dependencies/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
        echo "ARTIFACT_DST_PATH=/artifacts/${GITHUB_REPOSITORY#*/}/" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=${VIEWER_CHANNEL}-R$(cat ./indra/newview/VIEWER_VERSION.txt).${AUTOBUILD_BUILD_ID}-${RUNNER_OS}${ADDRESS_SIZE}.tar.gz" >> $GITHUB_ENV
      shell: bash

    - name: Log inputs
      run: |
        echo "::notice title=${VIEWER_CHANNEL} R$(cat ./indra/newview/VIEWER_VERSION.txt).${AUTOBUILD_BUILD_ID}-${RUNNER_OS}${ADDRESS_SIZE} (${{github.event.inputs.release_type}})::$(date +"%Y-%m-%d %T")"
      shell: bash

    - name: Download private packages
      uses: ./dep/action-scp
      with:
        key: ${{ secrets.SCP_KEY }}
        source_host: ${{ secrets.SCP_HOST }}
        source_username: ${{ secrets.SCP_USER }}
        source_file: ${{ env.DEPENDENCIES_SRC_PATH }}/packages/*
        destination_file: './dep/packages/'

    - name: Download NSIS plugins
      if: runner.os == 'Windows'
      uses: ./dep/action-scp
      with:
        key: ${{ secrets.SCP_KEY }}
        source_host: ${{ secrets.SCP_HOST }}
        source_username: ${{ secrets.SCP_USER }}
        source_file: ${{ env.DEPENDENCIES_SRC_PATH }}/nsis/*
        destination_file: './dep/nsis/'
        recursive: true

    #- name: Apply build time patches
    #  run: |
    #    ./scripts/build/git-apply.sh ./dep/build-tools/patches
    #  shell: bash

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: 'x64'

    - name: Install autobuild
      run: pip install "dep/autobuild"

    - name: Run autobuild configure (Mac)
      if: runner.os == 'macOS'
      run: autobuild configure --verbose --address-size ${{ env.ADDRESS_SIZE }} -c ${{ env.BUILD_CONFIG }} -- -DLL_TESTS=OFF -DPACKAGE=ON -DRELEASE_CRASH_REPORTING=OFF -DUSE_FMODSTUDIO=ON -DUSE_KDU=OFF -DHAVOK=OFF -DHAVOK_TPV=OFF -DVIEWER_CHANNEL="${{ env.VIEWER_CHANNEL }}" -DGCC_DISABLE_FATAL_WARNINGS=ON

    - name: Run autobuild configure (Windows)
      if: runner.os == 'Windows'
      run: autobuild configure --verbose --address-size ${{ env.ADDRESS_SIZE }} -c ${{ env.BUILD_CONFIG }} -- -DLL_TESTS=OFF -DPACKAGE=ON -DUSE_BUGSPLAT=ON -DRELEASE_CRASH_REPORTING=ON -DUSE_FMODSTUDIO=ON -DUSE_KDU=OFF -DHAVOK=OFF -DHAVOK_TPV=OFF -DBUNDLE_AVX2="${{ github.event.inputs.bundle_avx2 == 'true' && 'ON' || 'OFF' }}" -DVIEWER_CHANNEL="${{ env.VIEWER_CHANNEL }}" -T ${{ env.TOOLSET_VERSION }},host=x64

    - name: Run autobuild build
      run: autobuild build -A ${{ env.ADDRESS_SIZE }} -c ${{ env.BUILD_CONFIG }} --no-configure

    - name: Package (Windows)
      if: runner.os == 'Windows'
      run: |
        "C:\Program Files (x86)\NSIS\Bin\makensis.exe" /V2 "./build-vc${{ env.AUTOBUILD_VSVER }}-${{ env.ADDRESS_SIZE }}/newview/Release/catznip_setup_tmp.nsi"
      shell: cmd

    - name: Create artifact (Mac)
      if: runner.os == 'macOS'
      run: |
        tar -cvzf ./"$ARTIFACT_NAME" ./build-darwin-x86_64/newview/Release/*
      shell: bash

    - name: Create artifact (Windows)
      if: runner.os == 'Windows'
      run: |
        tar -cvzf ./"$ARTIFACT_NAME" ./build-vc"$AUTOBUILD_VSVER-$ADDRESS_SIZE"/newview/Release/*
      shell: bash

    - name: Publish artifact
      uses: ./dep/action-scp
      with:
        key: ${{ secrets.SCP_KEY }}
        source_file: ./*.tar.gz
        destination_host: ${{ secrets.SCP_HOST }}
        destination_username: ${{ secrets.SCP_USER }}
        destination_file: ${{ env.ARTIFACT_DST_PATH }}
